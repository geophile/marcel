# This file is part of Marcel.
# 
# Marcel is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, (or at your
# option) any later version.
# 
# Marcel is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Marcel.  If not, see <https://www.gnu.org/licenses/>.

import marcel.argsparser
import marcel.core
import marcel.exception

import threading
import time


HELP = '''
{L,wrap=F}timer INTERVAL

{L,indent=4:28}{r:INTERVAL}                The number of seconds to wait between consecutive timestamps.

Generate a sequence of timestamps, separated in time by a specified {r:INTERVAL}.
The output timestamp is time in seconds since 1/1/1970.
'''


def timer(interval, components=False):
    return Timer(), [interval]


class TimerArgsParser(marcel.argsparser.ArgsParser):

    def __init__(self, env):
        super().__init__('timer', env)
        self.add_anon('interval', convert=self.str_to_float)
        self.validate()


class Timer(marcel.core.Op):

    def __init__(self):
        super().__init__()
        self.metronome = None
        self.interval = None
        self.lock = None
        self.done = False
        self.now = None

    def __repr__(self):
        return f'timer({self.interval})'

    # AbstractOp
    
    def setup(self, env):
        self.lock = threading.Condition()
        self.metronome = Metronome(self)

    # AbstractOp
    
    def run(self, env):
        # Timer events are generated by the metronome class, which is a separate
        # thread. This keeps the intervals close to what is specified. If the
        # timer is run in the current thread, then the interval would control
        # the time between completion of downstream computing (invoked by self.send)
        # and the next timer event.
        self.metronome.start()
        while not self.done:
            self.lock.acquire()
            while self.now is None:
                # If the timeout is omitted from the wait call, then ctrl-c
                # cannot interrupt. The threading module implements wait
                # differently if a timeout is specified, waking up periodically.
                # TODO: Still true?
                self.lock.wait(1.0)
            now = self.now
            self.now = None
            self.lock.release()
            self.send(env, now)

    # Op

    def must_be_first_in_pipeline(self):
        return True

    # For use by this module

    def register_tick(self):
        self.lock.acquire()
        self.now = time.time()
        self.lock.notifyAll()
        self.lock.release()


class Metronome(threading.Thread):

    def __init__(self, op):
        threading.Thread.__init__(self)
        self.interval = op.interval
        self.timer = op
        self.daemon = True

    def run(self):
        while True:
            self.timer.register_tick()
            time.sleep(self.interval)
