
Tasks

- Reservoirs

    - When a reservoir is created, the env must be saved first. Otherwise,
      there could be a reservoir not referenced by the environment.

- History

    - Read at beginning.

    - Reread and append saved commands at end. 

    - Flush periodically to avoid bloat.

    - Real arg processing for marcel execution.

- HistoryRecord

  - Add timestamp

  - How do timestamps get saved? MultilineReader already edits the lines. 
    
    - Write lines with timestamp

    - Strip them off and keep them available on reading history.

----------------------------------------------------------------------

Op usage

Need to enforce this

                Interactive     Script         API
args                x             x             x
assign (1)          x             x
bash                x             x             x
bg                  x
cd                  x             x             x
difference          x             x             x
dirs                x             x             x
download            x             x             x
edit                x
env                 x             x
expand              x             x             x
fg                  x
filter              x             x             x
fork                x             x             x
gen                 x             x             x
head                x             x             x
help                x
history             x             x             x
ifelse              x             x             x
ifthen              x             x             x
import              x             x
intersect           x             x             x
jobs                x
join                x             x             x
load                x             x             x
ls                  x             x             x
map                 x             x             x
popd                x             x             x
ps                  x             x             x
pushd               x             x             x
pwd                 x             x             x
red                 x             x             x
read                x             x             x
remote              x             x             x
reverse             x             x             x
run                 x
runpipeline (2)     x             x
select              x             x             x
sort                x             x             x
squish              x             x             x
sql                 x             x             x
store               x             x             x
sudo                x             x             x
tail                x             x             x
tee                 x             x             x
timer               x             x             x
unique              x             x             x
union               x             x             x
upload              x             x             x
version             x             x             x
window              x             x             x
write               x             x             x
ws                  x

1: Assign *is* in the api currently. It operates on the env just like
CLI.

2: Not a public op

----------------------------------------------------------------------

Workspaces specification

Concepts:

Session: A marcel *session* is a process running marcel.  The session
and process end at the same instant.

Workspace: A *workspace* comprises the context in which marcel
commands executes. This context -- the workspace state -- comprises
the following:

- A startup script: This provides imports and definitions to be used
  by the session.

- A command history: As marcel executes commands, they are recorded in
  the workspace's command history.

- An environment: This is a set of environment variables, initialized
  by marcel and the startup script, and also operated on by the user.

The startup script is created upon workspace creation. Further changes
must be made by the user. Marcel maintains the other parts of
workspace state, the command history and environment.

Binding between sessions and workspaces: A session is always bound to
exactly one workspace. If no workspace is specified, then the default
workspace is used by a session.  A named workspace can be used by at
most one session at a time. The default workspace can be used by
multiple sessions at the same time. A workspace name must be a valid
filename on the host operating system. The default workspace name is
the empty string, which is an invalid name for a named workspace.

Unless a workspace is specifically selected and used, marcel runs
using the *default workspace*. A *named workspace* must be explicitly
created and selected for use.



Workspace lifecycle

Listing workspaces: Workspaces can be listed by marcel command,
e.g. "workspace --list". The listing will provide information on each
namespace, including name, creation date, and size on disk. 

Creating a workspace: A workspace is created by a marcel command,
e.g. "workspace --create NAME". This causes the workspace to be
opened.

Opening a workspace: A workspace is opened when it is created, or when
it is explicitly opened, e.g. "workspace --open NAME". When a
workspace is opened, the session's currently open workspace is closed.

Closing a workspace: A workspace is closed by a session when it is in
use by a session, and the session opens a different workspace. Upon
closing, the command history is saved, and for a named workspace, the
environment is saved. When the default workspace is closed, the
environment is lost. A workspace can also be closed by marcel command,
e.g. "workspace --close". When a named workspace is closed, the
default workspace is opened. Closing the default workspace can be
done, but has no effect since the default workspace is immediately
joined again. (However, the default namespace's command history on
disk will be updated.)

There is a subtle difference in command history persistence between
the two kinds of workspaces. When a session bound to a named workspace
ends normally, the commands issued for that workspace are simply
appended to the command history on disk. Because simultaneous sessions
using the same named workspace cannot occur, we know that the command
history hasn't been changed since the workspace was opened by that
session. issued in previous sessions that used the same workspace.
But the default workspace can be used simultaneously by different
sessions. Care must be taken to ensure that all the commands, in all
the sessions, are stored. When a session using the default namespace
exits, the command history on disk is read, the commands from the
session are appended, and the modified history is then written back to
disk. All this is done under a lock, to prevent contention for the
history file between the read and the write. 

If a session ends abnormally, e.g. a crash due to a bug in marcel, or
due to the OOM killer, then for a named workspace, some recent changes
to the command history and environment may be lost. For a default
session, the command history of that session will definitely be lost
(and the environment isn't saved in any case).

Deleting a workspace: A workspace can be deleted if it is not in use
by any session (including the current session). Deletion can be done
by a marcel command, e.g. "workspace --delete NAME".  Deleting a
workspace deletes the saved command history, environment, and any
files and directories created by marcel on the workspace's behalf.

Renaming a workspace: A workspace not in use by any session (including
the current session) can be renamed by marcel command, e.g. "workspace
--rename NAME NEW_NAME".

Duplicating a workspace: A workspace not in use by any session (including
the current session) can be duplicated by marcel command, e.g. "workspace
--copy NAME COPY_NAME".

Exporting a workspace: A workspace not in use by any session
(including the current session) can be exported to a file by marcel
command, e.g. "workspace --export NAME FILENAME". The filename will be
given a .mws (marcel workspace) extension if the filename does not
already have that suffix. This file can be used to recreate a
workspace, e.g., for a different user.

Importing a workspace: A workspace can be imported, given a file
containing an exported workspace. The import is done by a marcel
command, e.g. "workspace --import EXPORT_MWS". The name of the
imported workspace will be unchanged. In case of a name collision, the
import can be done with a new name, e.g. "workspace --import-rename
EXPORT_MWS NEW_NAME".

----------------------------------------------------------------------

Structure on disk:

.config/marcel/
    startup.py  # For anon workspaces, and template for named
    workspaces
    .WORKSPACE  # Marker for default workspace
    WORKSPACE_NAME/
        .WORKSPACE  # Empty file marking this directory as a workspace
        startup.py

.local/share/marcel/
    history
    reservoirs/  # FOR DEFAULT WORKSPACE 
        <pid>.<varname>.pickle  # Deleted at end of session
    WORKSPACE_NAME/
        properties.pickle
        env.pickle
        history
        reservoirs/
            <varname>.pickle

When a named workspace is open, .WORKSPACE is renamed to
.WORKSPACE.<PID> where <PID> is the pid of the owning process. Rename
is as atomic as things get in Linux, so even simultaneous renames
should be safe, giving the workspace unambiguously to one of the
processes. After claiming the file, the name should be checked by the
renaming process, to be sure that the rename went its way.

----------------------------------------------------------------------

Possible rules on workspace usage:

- A workspace can be used by at most one marcel instance at a time.

- Starting an anonymous workspace (no workspace selected) creates a new
  one. Resuming a workspace blocks anyone else from resuming the same
  workspace, (attempt results in error message and exit).

- Exiting anonymous workspace:

  - Present option to name it (don't allow duplicate names).

  - If declined, then save anyway with some identifying information?
    Or just delete it? Could save it with some descriptive information
    (e.g. start/end timestamps) to allow it to be located later.

- Exiting named workspace: No user input required.

- Allow for workspace rename



How is a named workspace deleted? Need workspace commands. Can only delete
one workspace while it is not in use, and from some other workspace.



Workspace management:

- List workspaces: name, size

- Delete workspace

- Duplicate workspace, giving duplicate a new name

- Start marcel with a named workspace. Problem: If you can't remember
  the name, you would need to start marcel to find out the name.

- Switch workspaces? That solves the forgotten name problem: Start anon,
  select a workspace. Switching to it ends the anon workspace. But then do
  we need all the end-of-anon workspace stuff?

- Prune workspace, deleting some subset of saved results. By time? By
  size? User-selected? Or have the user identify what to keep?

- Workspace state:

  - In /var/lib/marcel, owned by root? Maybe, but it's per-user
    state. Could also go to .local/share/marcel. But it's potentially
    a lot of space. Allow for user control.

  - Need to enforce a max, in case of commands that never end, e.g. "timer 1 | ..."


----------------------------------------------------------------------

Wait a minute. Why is automatically storing every command output a
good idea? It's already easy enough to store wanted results in a
variable, and then, with workspaces, persist those variables.

With everything stored, there's a lot to wade through, and cleaning
up, being selective about what's kept is labor intensive. Too easy to
accidentally delete something, too easy to be cautious and keep
everything, and then it's difficult to find what you want. Also
EVERYTHING is kept. Common shell usage is to refine commands until
they work properly. Just save the final, correct version.

Infinite output problem iss avoided. It should be pretty obvious that
"timer 1 ... >$ var" is a bad idea.

----------------------------------------------------------------------
    
Keep track of multiple histories


What happens when there are concurrent workspaces. Does one exiting
overwrite history from another?

Merge them all into one history?

If multiple histories are tracked, how to select one on startup?

Bash:

- history read at startup

- Changes tracked and written on exit. (Or maybe the whole history
  including changes from this console). But there isn't an
  overwrite. So on exit, the history must be read again, and local
  changes appended?

Generalizing this: Keep track of workspaces:

- A workspace has its own history.

- Vars are scoped to the workspace, and restarting a workspace brings back
  those vars and their values.

- Disallow multiple concurrent uses of a workspace?

- Support workspace distribution. E.g., tar czvf and write to
  specified location; import the package to create a workspace
  locally.

- I guess workspaces need names, or some way to refer to
  them. E.g. start marcel with workspace foobar. If no workspace
  specified, then:

  - vars not preserved?
  - what happens to history on exit?

- Workspace name should NOT BE STORED inside the workspace. Otherwise
  distribution gets messy. 

- Stream-valued vars can be large (on disk). Provide a way to manage
  them.

From https://github.com/geophile/marcel/issues/6:

    - Ability to hibernate (save context, close, and open it back again)

Exactly, that's a workspace.
    
    - Ability to store multiple result buffers (aka output of previous commands).

    - Ability to access the stored buffers and run processing functions on
      them (e.g. I take a snapshot of counters and after a while another
      snapshot - can I see the diff?)

Idea: Store results of previous commands automatically, (results would
be BEFORE an implicit write). Be able to recall these, based on this
history mechanism.


----------------------------------------------------------------------

TODO:

One tricky issue: What if stored env has a var xyz, and then startup
modified to add xyz?

- Conflict in startup script: Kill shell, notify user

- Conflict in env.py: rename stored var, notify user

======================================================================


exists: true for default, otherwise, see if marker exists

Workspace
    - name
    create_time()
    open_time()
    save_time()
    is_default()
    exists()
    create()
    open()
    close()
    set_home()

WorkspaceNamed
    - properties
    - persistent_state
    create_time()
    open_time()
    save_time()
    is_default()
    is_open()
    create()
    open()
    close()
    set_home()

    delete()
    home()

WorkspaceDefault

close()

- Sets self.env_file to temp file, writes env there. 

*** But this deletes reservoirs! Need to rethink ws lifecycle across ReconfigureException.

open()

- Reads and discards temp file

----------------------------------------------------------------------

Workspace.close: 

- Close and delete reservoirs.

- This is correct for default workspace on shutdown, but not on restart.

WorkspaceNamed.close:

- Close reservoirs, don't delete them.

WorkspaceDefault.close:

- Close reservoirs. On shutdown, delete them. On restart, keep them.

----------------------------------------------------------------------

To do:

- lifecycle testing: Check across process and ws boundaries:

    - reservoirs

    - imports

    - assigned vars


Structure on disk:

    CURRENT:

    .config/marcel/
        startup.py  # For anon workspaces, and template for named
        .WORKSPACE  # Marker for default workspace
        WORKSPACE_NAME/
            .WORKSPACE  # Empty file marking this directory as a workspace
            startup.py

    .local/share/marcel/
        history
        reservoirs/  # FOR DEFAULT WORKSPACE 
            <pid>.<varname>.pickle  # Deleted at end of session
        WORKSPACE_NAME/
            properties.pickle
            env.pickle
            history
            reservoirs/
                <varname>.pickle

    NEW:

    .config/marcel/
        __DEFAULT_WORKSPACE__
            startup.py
            .WORKSPACE
        WORKSPACE_NAME/
            .WORKSPACE  # Empty file marking this directory as a workspace
            startup.py

    .local/share/marcel/
        __DEFAULT_WORKSPACE__
            <pid>.env.pickle  # Deleted on non-restart shutdown
            history
            reservoirs/
                <pid>.<varname>.pickle  # Deleted on non-restart shutdown
        WORKSPACE_NAME/
            properties.pickle
            env.pickle
            history
            reservoirs/
                <varname>.pickle

 
  - Similar for .local/share/marcel
  
----------------------------------------------------------------------

3/28/24

Lifecycle

Workspace.create
    - Check exists (marker file is present)
    - Create config dir
    - Write startup.py
    - Create marker file
    - Create data and reservoir dirs
    - touch history file

Workspace.open
    - lock marker
    - read properties
    - read env

Workspace.close
    - check open
    - write properties
    - close reservoirs
    - write env
    - unlock marker

Workspace.delete
    - assert not open
    - lock workspace
    - delete everything

......................................................................

WsNew
    - create ws
    - open ws
    - raise reconfigure exception

WsOpen
    - open ws
    - raise reconfigure exception

WsClose
    - close ws
    - if not default: open default, raise
    *** So if it is default it stays closed?!

WsDelete
    - delete ws (doesn't affect current ws)

----------------------------------------------------------------------

TODO:

- Test for valid new workspace name. What happens if creating the dir
  fails due to a bad filename?

- If any (other) marcel process is running, and migration is needed,
  don't start.

- Should probably have marker files for default workspaces,
  e.g. .WORKSPACE.<pid> works, as for named workspaces, but
  always keep the original (.WORKSPACE), don't rename it.

  Otherwise, we can't tell if a default workspace process is running,
  which should block migration. (Testing for any .WORKSPACE.<pid> is
  unreliable, but better than nothing.)

- For persistence across restart after edit -s:

  - Store env in __DEFAULT_WORKSPACE__/<pid>.env.pickle

  - If shutdown is for restart, don't delete reservoirs, just close
    them. Maybe always just close reservoirs, and then delete is an
    extra step, just for default, just on non-restart shutdown.

----------------------------------------------------------------------

Workspace validation

- Workspace on disk may be broken because of bugs or user action,
  e.g. marker file missing.

- This creates havoc for workspace operations.

- Need validation. Check all workspaces on startup: directories under
  ./config/marcel and .local/share/marcel.

- Report problems on startup (i.e., contents of broken dirs). Report
  newly discovered problems, and previous ones separately.

- New ws command:

    ws [-x|--exterminate] [WS_NAME ...]

  Deletes named broken workspaces, or all broken workspaces if no names provided.

- Structure:

  Current:

    .config/marcel/
        VERSION
        __DEFAULT_WORKSPACE__
            startup.py
            .WORKSPACE
        WORKSPACE_NAME/
            .WORKSPACE  # Empty file marking this directory as a workspace
            startup.py

    .local/share/marcel/
        __DEFAULT_WORKSPACE__
            <pid>.env.pickle  # Deleted on non-restart shutdown
            history
            reservoirs/
                <pid>.<varname>.pickle  # Deleted on non-restart shutdown
        WORKSPACE_NAME/
            properties.pickle
            env.pickle
            history
            reservoirs/
                <varname>.pickle

  New:

    .config/marcel/
        VERSION
        broken
            <timestamp>/  # When damage detected
                <workspace dirs>
        workspace
            __DEFAULT__
                .WORKSPACE
                startup.py
            WORKSPACE_NAME/
                .WORKSPACE  # Empty file marking this directory as a workspace
                startup.py

    .local/share/marcel/
        broken
            <timestamp>/  # When damage detected
                <workspace dirs>
        workspace
            __DEFAULT__
                <pid>.env.pickle  # Deleted on non-restart shutdown
                history
                reservoirs/
                    <pid>.<varname>.pickle  # Deleted on non-restart shutdown
            WORKSPACE_NAME/
                properties.pickle
                env.pickle
                history
                reservoirs/
                    <varname>.pickle

  Changes:

  - Add "broken" dirs
  
  - Add "workspace" dirs 
  
  - Move workspace dirs inside "workspace"

  - Rename __DEFAULT_WORKSPACE__ to __DEFAULT__

----------------------------------------------------------------------

To do:

- Validation

    * Implementation

    - Default workspace validation

    * Check on startup

    - Validate on open, close

- Broken workspaces

    * Put in broken directory

    * Naming? Have to handle multiple broken workspaces with the same
      name.

- Main now has initialize_persistent_config_and_data(). But this is
  only run for MainScript, MainInteractive. Is on-disk required for
  API-only usage?

* validate_all doesn't belong in Workspace. It checks the marcel
  on-disk state, not just workspaces.

* Staring marcel with a broken ws is bad. Startup moves the workspace
  state. Don't operate with the workspace in this condition. Need to
  restart with default workspace, and a message indicating the
  problem.


- Locations cleanup:

    .config/marcel/                             config()
        VERSION                                 config_version()
        broken                                  * config_bws()
            <timestamp>/                        
                <workspace dirs>                * config_bws(workspace, timestamp)
        workspace                               * config_ws()
            WORKSPACE_NAME/                     * config_ws(workspace)
                .WORKSPACE
                startup.py                      config_ws_startup(workspace)

    .local/share/marcel/                        data()
        broken                                  * data_bws()
            <timestamp>/                        
                <workspace dirs>                * data_bws(workspace, timestamp)
        workspace                               * data_ws()
            WORKSPACE_NAME/                     * data_ws(workspace)
                properties.pickle               data_ws_prop(workspace)
                env.pickle                      data_ws_env(workspace)
                history                         data_ws_hist(workspace)
                reservoirs/                     * data_ws_res(workspace)
                    <varname>.pickle            * data_ws_res(workspace, name)

* Overloaded (which is OK)

