5/2/25

Marcel emphasizes powerful pipelines.

It's not so great as a general purpose shell. It should be possible to do this:

    #!/usr/local/bin/marcel

    WHO = ('world')
    (f'Hello {WHO}')

But if this is stored in x.m, then

    ./x.m

produces this output:

    There is no workspaced named ./x.m.

The reason is that "marcel xyz" starts marcel with workspace xyz. To
run a script, it's "marcel -e ./x.m". This would have to change.

Also how would a command line arg be passed to x.m?

......................................................................

What's needed:

- Change invocation of marcel so that "./x.m" works.

- Be able to pass args, e.g. so that "./x.m foobar" prints "Hello
  foobar".

- Commands should yield return codes. Subsequent commands should be
  able to test and act on them.

----------------------------------------------------------------------

5/4/25

Current marcel invocation:

    marcel [WORKSPACE] [-e|--execute SCRIPT] [--mpstart fork|spawn|forkserver]
    marcel [-h|--help]
    
    Run marcel, interactively unless a SCRIPT is provided.
    
    if WORKSPACE is specified, then marcel will open the named WORKSPACE before 
    executing commands interactively or commands from the SCRIPT.
    
    This usage message is obtained by running marcel with the -h or --help
    flag. For more detailed help, run marcel interactively and use the "help" command.
    
    Leave out --mpstart unless you really know what you're doing, or you're desperate. 
    It defaults to fork.



https://superuser.com/questions/195826/bash-shebang-for-dummies:

    If a script /path/to/foo begins with #!/bin/bash, then executing
    /path/to/foo arg1 arg2 is equivalent to executing /bin/bash
    /path/too/foo arg1 arg2

So:

- "marcel x" should execute the script x. Get rid of -e|--execute.

- Need a different way to specify a workspace. Can't be an anonymous
  arg, or specified via flag, as these would interfere with script
  usage. Just get rid of the command-line option? 

- Get rid of mpstart arg. Hard code, or test platform to determine
  mpstart value.

----------------------------------------------------------------------

5/5/25

Script args need to be accessible to marcel. Would like to support
plain args, and short and long flags, with or without values

- Anon only:

    marcel /foo/bar/some_script.m a b c
      
- Anon after short and long:

    marcel /foo/bar/some_script.m -s a --long b c d e

- Short and long with no values:

    marcel /foo/bar/some_script.m -s --long

Ideas:

- Put all args in env var ARGV

- Allow marcel script to declare args sort of like getopt. E.g.

  parseargs ({'abc': arg('-a', '--abc'), 'def': flag('-d'), 'ghi': arg('--ghi'), x: other()})

  - arg: Expects a single value, can have short and long names.

  - flag: No value expected, if specified, value is True, else False

  - other(): other args

----------------------------------------------------------------------

5/7/25

Terminology:

        /x/y/foobar a -b c -d --efg h i j

- arg: Tokens on the command line, so /x/y/foobar, a, -b, c, ...

- argv: A vector of all args. 

- /x/y/foobar: script (available in argv[0])

- a, i, j: anonymous args: Anon

- -b c: short flag and its value: Flag

- -d: short flag, no value: BooleanFlag

- --efg h: Long flag and its value

----------------------------------------------------------------------

5/11/25

Distinguishing heredoc from script

https://chatgpt.com/c/6820de7b-7e1c-8003-8ef2-064fbd623109

import sys
import os
import stat

def stdin_source():
    mode = os.fstat(sys.stdin.fileno()).st_mode
    if stat.S_ISREG(mode):
        return "file"
    elif stat.S_ISFIFO(mode):
        return "heredoc_or_pipe"
    elif stat.S_ISCHR(mode):
        return "terminal"
    else:
        return "unknown"

print(f"stdin is from: {stdin_source()}")


......................................................................

x.p:

#!/usr/bin/python3

import os
import sys
import stat

print(f'argv: {sys.argv}')
print(f'orig_argv: {sys.orig_argv}')
print(f'stdin fileno: {sys.stdin.fileno()}')
mode = os.fstat(sys.stdin.fileno()).st_mode
print(f'isreg: {stat.S_ISREG(mode)}')
print(f'isfifo: {stat.S_ISFIFO(mode)}')
print(f'ischr: {stat.S_ISCHR(mode)}')

......................................................................

jao@loon:/tmp$ /tmp/x.p
argv: ['/tmp/x.p']
orig_argv: ['/usr/bin/python3', '/tmp/x.p']
stdin fileno: 0
isreg: False
isreg: False
isfifo: False
ischr: True
jao@loon:/tmp$ /tmp/x.p
argv: ['/tmp/x.p']
orig_argv: ['/usr/bin/python3', '/tmp/x.p']
stdin fileno: 0
isreg: False
isfifo: False
ischr: True
jao@loon:/tmp$ python3 <<EOF
> import os
> import sys
> import stat
> mode = os.fstat(sys.stdin.fileno()).st_mode
> print(stat.S_ISREG(mode))
> print(stat.S_ISFIFO(mode))
> print(stat.S_ISCHR(mode))
> EOF
False
True
False

----------------------------------------------------------------------

5/14/25

case or args not working?

#!/usr/local/bin/marcel

(parse_args(ext=flag('-e', '--ext'), \
            recursive=boolean_flag('-r', '--recursive'), \
            dirs=anon()))

(f'recursive: {recursive}')
(f'ext: {ext}')
(f'dirs: {dirs}')

(recursive) | args (| recursive: \
    case (_: recursive) (| ls -fr |) \
                        (| ls -f |) \
|)

# | write \
# | case (_: ext is None) (| (f: f) |) \
#                         (| select (f: f.suffix[1:] == ext) |) \
# | map (f: (1, f.size)) \
# | red + + \
# |)

----------------------------------------------------------------------

5/15/25

case wasn't designed to be first in pipeline. run() doesn't do
anything.  Need to rethink how run() can work for ops that don't
normally appear first in a pipeline.

What should be possible:

    case (VAR) (| ... if pipeline ... |)
               (| ... else pipeline ... |)

Current workaround:

    (VAR) | case (var: var)
               (| ... if pipeline ... |)
               (| ... else pipeline ... |)

- if/else pipelines with functions will need to take an arg (value of
VAR).

